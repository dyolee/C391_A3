RELATIONAL SCHEMA:

The basic strategy for our database was to store all triples in a single table
called "rdf", and all the prefixes in another table called "uri". The SQLite
statements to do this are as follows:

	CREATE TABLE uri (prefix text UNIQUE, uri text UNIQUE); CREATE TABLE rdf
	(subject text, predicate text, object text);



STRATEGY:

To convert the RDF data into a database, we stored the prefix and its uri into
the table "uri", and we stored the rdf "words" (subjects, predicates, and
objects) into the table "rdf".

The uri table does not allow duplicates for prefix and uris. So the user cannot
accidentally define a prefix twice. In any case, even if the user does
accidentally do so, then the program doesn't return an error message. It simply
ignores the fact that the prefix is defined twice (it is nicer to the user). But
if the prefix is not defined then the prefix and its respective uri is added to
the table.

For the rdf table, the strategy is more complex, due to the fact that every line
has a different number of arguments based on the previous line's punctuation. In
order to achieve our goal, we used three things: a list called params
(parameters), a string variable called previousPunc (previous punctuation), and
a list called errorCheckOutput (is returned after the error_check function).
params holds all the words that are missing from the current line but is needed
(ex. if the previous line ended with a "," then we only have the new object...
params would be the one to hold the subject and predicate that we need).
previousPunc is the previous line's punctuation, and basically tells the program
how many words there should be in params and errorCheckOutput. errorCheckOutput
holds a string variable holding the previous line's punctuation and a list
containing the current line's variables. Lots of error checking are also
included in the code.